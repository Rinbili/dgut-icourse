// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dgut-icourse/ent/comment"
	"dgut-icourse/ent/coursecomment"
	"dgut-icourse/ent/object"
	"dgut-icourse/ent/user"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Comment is the model entity for the Comment schema.
type Comment struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 评论内容
	Content string `json:"content,omitempty"`
	// 评分
	Score int `json:"score,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CommentQuery when eager-loading is set.
	Edges            CommentEdges `json:"edges"`
	comment_author   *uuid.UUID
	comment_children *uuid.UUID
	object_comments  *uuid.UUID
	selectValues     sql.SelectValues
}

// CommentEdges holds the relations/edges for other nodes in the graph.
type CommentEdges struct {
	// 评论作者
	Author *User `json:"author,omitempty"`
	// Object holds the value of the object edge.
	Object *Object `json:"object,omitempty"`
	// Parent holds the value of the parent edge.
	Parent *Comment `json:"parent,omitempty"`
	// Children holds the value of the children edge.
	Children []*Comment `json:"children,omitempty"`
	// CourseComment holds the value of the course_comment edge.
	CourseComment *CourseComment `json:"course_comment,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// AuthorOrErr returns the Author value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) AuthorOrErr() (*User, error) {
	if e.Author != nil {
		return e.Author, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: user.Label}
	}
	return nil, &NotLoadedError{edge: "author"}
}

// ObjectOrErr returns the Object value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) ObjectOrErr() (*Object, error) {
	if e.Object != nil {
		return e.Object, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: object.Label}
	}
	return nil, &NotLoadedError{edge: "object"}
}

// ParentOrErr returns the Parent value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) ParentOrErr() (*Comment, error) {
	if e.Parent != nil {
		return e.Parent, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: comment.Label}
	}
	return nil, &NotLoadedError{edge: "parent"}
}

// ChildrenOrErr returns the Children value or an error if the edge
// was not loaded in eager-loading.
func (e CommentEdges) ChildrenOrErr() ([]*Comment, error) {
	if e.loadedTypes[3] {
		return e.Children, nil
	}
	return nil, &NotLoadedError{edge: "children"}
}

// CourseCommentOrErr returns the CourseComment value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CommentEdges) CourseCommentOrErr() (*CourseComment, error) {
	if e.CourseComment != nil {
		return e.CourseComment, nil
	} else if e.loadedTypes[4] {
		return nil, &NotFoundError{label: coursecomment.Label}
	}
	return nil, &NotLoadedError{edge: "course_comment"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Comment) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case comment.FieldCreatedAt, comment.FieldUpdatedAt, comment.FieldScore:
			values[i] = new(sql.NullInt64)
		case comment.FieldContent:
			values[i] = new(sql.NullString)
		case comment.FieldID:
			values[i] = new(uuid.UUID)
		case comment.ForeignKeys[0]: // comment_author
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case comment.ForeignKeys[1]: // comment_children
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		case comment.ForeignKeys[2]: // object_comments
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Comment fields.
func (c *Comment) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case comment.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case comment.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Int64
			}
		case comment.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Int64
			}
		case comment.FieldContent:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field content", values[i])
			} else if value.Valid {
				c.Content = value.String
			}
		case comment.FieldScore:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field score", values[i])
			} else if value.Valid {
				c.Score = int(value.Int64)
			}
		case comment.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field comment_author", values[i])
			} else if value.Valid {
				c.comment_author = new(uuid.UUID)
				*c.comment_author = *value.S.(*uuid.UUID)
			}
		case comment.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field comment_children", values[i])
			} else if value.Valid {
				c.comment_children = new(uuid.UUID)
				*c.comment_children = *value.S.(*uuid.UUID)
			}
		case comment.ForeignKeys[2]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field object_comments", values[i])
			} else if value.Valid {
				c.object_comments = new(uuid.UUID)
				*c.object_comments = *value.S.(*uuid.UUID)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Comment.
// This includes values selected through modifiers, order, etc.
func (c *Comment) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryAuthor queries the "author" edge of the Comment entity.
func (c *Comment) QueryAuthor() *UserQuery {
	return NewCommentClient(c.config).QueryAuthor(c)
}

// QueryObject queries the "object" edge of the Comment entity.
func (c *Comment) QueryObject() *ObjectQuery {
	return NewCommentClient(c.config).QueryObject(c)
}

// QueryParent queries the "parent" edge of the Comment entity.
func (c *Comment) QueryParent() *CommentQuery {
	return NewCommentClient(c.config).QueryParent(c)
}

// QueryChildren queries the "children" edge of the Comment entity.
func (c *Comment) QueryChildren() *CommentQuery {
	return NewCommentClient(c.config).QueryChildren(c)
}

// QueryCourseComment queries the "course_comment" edge of the Comment entity.
func (c *Comment) QueryCourseComment() *CourseCommentQuery {
	return NewCommentClient(c.config).QueryCourseComment(c)
}

// Update returns a builder for updating this Comment.
// Note that you need to call Comment.Unwrap() before calling this method if this Comment
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Comment) Update() *CommentUpdateOne {
	return NewCommentClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Comment entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Comment) Unwrap() *Comment {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Comment is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Comment) String() string {
	var builder strings.Builder
	builder.WriteString("Comment(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", c.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", c.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("content=")
	builder.WriteString(c.Content)
	builder.WriteString(", ")
	builder.WriteString("score=")
	builder.WriteString(fmt.Sprintf("%v", c.Score))
	builder.WriteByte(')')
	return builder.String()
}

// Comments is a parsable slice of Comment.
type Comments []*Comment
