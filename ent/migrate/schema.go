// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
		{Name: "content", Type: field.TypeString, Size: 255},
		{Name: "score", Type: field.TypeInt},
		{Name: "comment_author", Type: field.TypeUUID},
		{Name: "comment_children", Type: field.TypeUUID, Nullable: true},
		{Name: "object_comments", Type: field.TypeUUID, Nullable: true},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_users_author",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "comments_comments_children",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "comments_objects_comments",
				Columns:    []*schema.Column{CommentsColumns[7]},
				RefColumns: []*schema.Column{ObjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CoursesColumns holds the columns for the "courses" table.
	CoursesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
		{Name: "course_id", Type: field.TypeString},
		{Name: "object_course", Type: field.TypeUUID, Unique: true},
		{Name: "object_teach_courses", Type: field.TypeUUID, Nullable: true},
		{Name: "object_setup_courses", Type: field.TypeUUID, Nullable: true},
	}
	// CoursesTable holds the schema information for the "courses" table.
	CoursesTable = &schema.Table{
		Name:       "courses",
		Columns:    CoursesColumns,
		PrimaryKey: []*schema.Column{CoursesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "courses_objects_course",
				Columns:    []*schema.Column{CoursesColumns[4]},
				RefColumns: []*schema.Column{ObjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "courses_objects_teach_courses",
				Columns:    []*schema.Column{CoursesColumns[5]},
				RefColumns: []*schema.Column{ObjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:     "courses_objects_setup_courses",
				Columns:    []*schema.Column{CoursesColumns[6]},
				RefColumns: []*schema.Column{ObjectsColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// CourseCommentsColumns holds the columns for the "course_comments" table.
	CourseCommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "difficulty", Type: field.TypeInt8},
		{Name: "quality", Type: field.TypeInt8},
		{Name: "workload", Type: field.TypeInt8},
		{Name: "mark", Type: field.TypeInt8},
		{Name: "comment_course_comment", Type: field.TypeUUID, Unique: true},
	}
	// CourseCommentsTable holds the schema information for the "course_comments" table.
	CourseCommentsTable = &schema.Table{
		Name:       "course_comments",
		Columns:    CourseCommentsColumns,
		PrimaryKey: []*schema.Column{CourseCommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "course_comments_comments_course_comment",
				Columns:    []*schema.Column{CourseCommentsColumns[5]},
				RefColumns: []*schema.Column{CommentsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// ObjectsColumns holds the columns for the "objects" table.
	ObjectsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
		{Name: "name", Type: field.TypeString, Size: 30},
		{Name: "desc", Type: field.TypeString, Size: 255},
		{Name: "type", Type: field.TypeInt8},
	}
	// ObjectsTable holds the schema information for the "objects" table.
	ObjectsTable = &schema.Table{
		Name:       "objects",
		Columns:    ObjectsColumns,
		PrimaryKey: []*schema.Column{ObjectsColumns[0]},
	}
	// OrganizationsColumns holds the columns for the "organizations" table.
	OrganizationsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
		{Name: "type", Type: field.TypeInt8},
		{Name: "address", Type: field.TypeString},
		{Name: "object_organization", Type: field.TypeUUID, Unique: true},
	}
	// OrganizationsTable holds the schema information for the "organizations" table.
	OrganizationsTable = &schema.Table{
		Name:       "organizations",
		Columns:    OrganizationsColumns,
		PrimaryKey: []*schema.Column{OrganizationsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "organizations_objects_organization",
				Columns:    []*schema.Column{OrganizationsColumns[5]},
				RefColumns: []*schema.Column{ObjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// OthersColumns holds the columns for the "others" table.
	OthersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "object_other", Type: field.TypeUUID, Unique: true},
	}
	// OthersTable holds the schema information for the "others" table.
	OthersTable = &schema.Table{
		Name:       "others",
		Columns:    OthersColumns,
		PrimaryKey: []*schema.Column{OthersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "others_objects_other",
				Columns:    []*schema.Column{OthersColumns[1]},
				RefColumns: []*schema.Column{ObjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// PersonsColumns holds the columns for the "persons" table.
	PersonsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "object_person", Type: field.TypeUUID, Unique: true},
	}
	// PersonsTable holds the schema information for the "persons" table.
	PersonsTable = &schema.Table{
		Name:       "persons",
		Columns:    PersonsColumns,
		PrimaryKey: []*schema.Column{PersonsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "persons_objects_person",
				Columns:    []*schema.Column{PersonsColumns[1]},
				RefColumns: []*schema.Column{ObjectsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
		{Name: "nick_name", Type: field.TypeString, Nullable: true, Size: 30},
		{Name: "password", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "phone", Type: field.TypeString, Unique: true, Nullable: true, Size: 15},
		{Name: "icon", Type: field.TypeString, Nullable: true, Size: 2147483647},
		{Name: "openid", Type: field.TypeString, Size: 30},
		{Name: "user_info", Type: field.TypeInt, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "users_user_infos_info",
				Columns:    []*schema.Column{UsersColumns[8]},
				RefColumns: []*schema.Column{UserInfosColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// UserInfosColumns holds the columns for the "user_infos" table.
	UserInfosColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeInt64},
		{Name: "updated_at", Type: field.TypeInt64},
	}
	// UserInfosTable holds the schema information for the "user_infos" table.
	UserInfosTable = &schema.Table{
		Name:       "user_infos",
		Columns:    UserInfosColumns,
		PrimaryKey: []*schema.Column{UserInfosColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CommentsTable,
		CoursesTable,
		CourseCommentsTable,
		ObjectsTable,
		OrganizationsTable,
		OthersTable,
		PersonsTable,
		UsersTable,
		UserInfosTable,
	}
)

func init() {
	CommentsTable.ForeignKeys[0].RefTable = UsersTable
	CommentsTable.ForeignKeys[1].RefTable = CommentsTable
	CommentsTable.ForeignKeys[2].RefTable = ObjectsTable
	CoursesTable.ForeignKeys[0].RefTable = ObjectsTable
	CoursesTable.ForeignKeys[1].RefTable = ObjectsTable
	CoursesTable.ForeignKeys[2].RefTable = ObjectsTable
	CourseCommentsTable.ForeignKeys[0].RefTable = CommentsTable
	OrganizationsTable.ForeignKeys[0].RefTable = ObjectsTable
	OthersTable.ForeignKeys[0].RefTable = ObjectsTable
	PersonsTable.ForeignKeys[0].RefTable = ObjectsTable
	UsersTable.ForeignKeys[0].RefTable = UserInfosTable
}
