// Code generated by ent, DO NOT EDIT.

package coursecomment

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the coursecomment type in the database.
	Label = "course_comment"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDifficulty holds the string denoting the difficulty field in the database.
	FieldDifficulty = "difficulty"
	// FieldQuality holds the string denoting the quality field in the database.
	FieldQuality = "quality"
	// FieldWorkload holds the string denoting the workload field in the database.
	FieldWorkload = "workload"
	// FieldMark holds the string denoting the mark field in the database.
	FieldMark = "mark"
	// EdgeComment holds the string denoting the comment edge name in mutations.
	EdgeComment = "comment"
	// Table holds the table name of the coursecomment in the database.
	Table = "course_comments"
	// CommentTable is the table that holds the comment relation/edge.
	CommentTable = "course_comments"
	// CommentInverseTable is the table name for the Comment entity.
	// It exists in this package in order to avoid circular dependency with the "comment" package.
	CommentInverseTable = "comments"
	// CommentColumn is the table column denoting the comment relation/edge.
	CommentColumn = "comment_course_comment"
)

// Columns holds all SQL columns for coursecomment fields.
var Columns = []string{
	FieldID,
	FieldDifficulty,
	FieldQuality,
	FieldWorkload,
	FieldMark,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "course_comments"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"comment_course_comment",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the CourseComment queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDifficulty orders the results by the difficulty field.
func ByDifficulty(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDifficulty, opts...).ToFunc()
}

// ByQuality orders the results by the quality field.
func ByQuality(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldQuality, opts...).ToFunc()
}

// ByWorkload orders the results by the workload field.
func ByWorkload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWorkload, opts...).ToFunc()
}

// ByMark orders the results by the mark field.
func ByMark(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMark, opts...).ToFunc()
}

// ByCommentField orders the results by comment field.
func ByCommentField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newCommentStep(), sql.OrderByField(field, opts...))
	}
}
func newCommentStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(CommentInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, CommentTable, CommentColumn),
	)
}
