// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dgut-icourse/ent/comment"
	"dgut-icourse/ent/coursecomment"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// CourseCommentCreate is the builder for creating a CourseComment entity.
type CourseCommentCreate struct {
	config
	mutation *CourseCommentMutation
	hooks    []Hook
}

// SetDifficulty sets the "difficulty" field.
func (ccc *CourseCommentCreate) SetDifficulty(i int8) *CourseCommentCreate {
	ccc.mutation.SetDifficulty(i)
	return ccc
}

// SetQuality sets the "quality" field.
func (ccc *CourseCommentCreate) SetQuality(i int8) *CourseCommentCreate {
	ccc.mutation.SetQuality(i)
	return ccc
}

// SetWorkload sets the "workload" field.
func (ccc *CourseCommentCreate) SetWorkload(i int8) *CourseCommentCreate {
	ccc.mutation.SetWorkload(i)
	return ccc
}

// SetMark sets the "mark" field.
func (ccc *CourseCommentCreate) SetMark(i int8) *CourseCommentCreate {
	ccc.mutation.SetMark(i)
	return ccc
}

// SetCommentID sets the "comment" edge to the Comment entity by ID.
func (ccc *CourseCommentCreate) SetCommentID(id uuid.UUID) *CourseCommentCreate {
	ccc.mutation.SetCommentID(id)
	return ccc
}

// SetComment sets the "comment" edge to the Comment entity.
func (ccc *CourseCommentCreate) SetComment(c *Comment) *CourseCommentCreate {
	return ccc.SetCommentID(c.ID)
}

// Mutation returns the CourseCommentMutation object of the builder.
func (ccc *CourseCommentCreate) Mutation() *CourseCommentMutation {
	return ccc.mutation
}

// Save creates the CourseComment in the database.
func (ccc *CourseCommentCreate) Save(ctx context.Context) (*CourseComment, error) {
	return withHooks(ctx, ccc.sqlSave, ccc.mutation, ccc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ccc *CourseCommentCreate) SaveX(ctx context.Context) *CourseComment {
	v, err := ccc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ccc *CourseCommentCreate) Exec(ctx context.Context) error {
	_, err := ccc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ccc *CourseCommentCreate) ExecX(ctx context.Context) {
	if err := ccc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ccc *CourseCommentCreate) check() error {
	if _, ok := ccc.mutation.Difficulty(); !ok {
		return &ValidationError{Name: "difficulty", err: errors.New(`ent: missing required field "CourseComment.difficulty"`)}
	}
	if _, ok := ccc.mutation.Quality(); !ok {
		return &ValidationError{Name: "quality", err: errors.New(`ent: missing required field "CourseComment.quality"`)}
	}
	if _, ok := ccc.mutation.Workload(); !ok {
		return &ValidationError{Name: "workload", err: errors.New(`ent: missing required field "CourseComment.workload"`)}
	}
	if _, ok := ccc.mutation.Mark(); !ok {
		return &ValidationError{Name: "mark", err: errors.New(`ent: missing required field "CourseComment.mark"`)}
	}
	if _, ok := ccc.mutation.CommentID(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required edge "CourseComment.comment"`)}
	}
	return nil
}

func (ccc *CourseCommentCreate) sqlSave(ctx context.Context) (*CourseComment, error) {
	if err := ccc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ccc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ccc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ccc.mutation.id = &_node.ID
	ccc.mutation.done = true
	return _node, nil
}

func (ccc *CourseCommentCreate) createSpec() (*CourseComment, *sqlgraph.CreateSpec) {
	var (
		_node = &CourseComment{config: ccc.config}
		_spec = sqlgraph.NewCreateSpec(coursecomment.Table, sqlgraph.NewFieldSpec(coursecomment.FieldID, field.TypeInt))
	)
	if value, ok := ccc.mutation.Difficulty(); ok {
		_spec.SetField(coursecomment.FieldDifficulty, field.TypeInt8, value)
		_node.Difficulty = value
	}
	if value, ok := ccc.mutation.Quality(); ok {
		_spec.SetField(coursecomment.FieldQuality, field.TypeInt8, value)
		_node.Quality = value
	}
	if value, ok := ccc.mutation.Workload(); ok {
		_spec.SetField(coursecomment.FieldWorkload, field.TypeInt8, value)
		_node.Workload = value
	}
	if value, ok := ccc.mutation.Mark(); ok {
		_spec.SetField(coursecomment.FieldMark, field.TypeInt8, value)
		_node.Mark = value
	}
	if nodes := ccc.mutation.CommentIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   coursecomment.CommentTable,
			Columns: []string{coursecomment.CommentColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.comment_course_comment = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// CourseCommentCreateBulk is the builder for creating many CourseComment entities in bulk.
type CourseCommentCreateBulk struct {
	config
	err      error
	builders []*CourseCommentCreate
}

// Save creates the CourseComment entities in the database.
func (cccb *CourseCommentCreateBulk) Save(ctx context.Context) ([]*CourseComment, error) {
	if cccb.err != nil {
		return nil, cccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(cccb.builders))
	nodes := make([]*CourseComment, len(cccb.builders))
	mutators := make([]Mutator, len(cccb.builders))
	for i := range cccb.builders {
		func(i int, root context.Context) {
			builder := cccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CourseCommentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cccb *CourseCommentCreateBulk) SaveX(ctx context.Context) []*CourseComment {
	v, err := cccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cccb *CourseCommentCreateBulk) Exec(ctx context.Context) error {
	_, err := cccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cccb *CourseCommentCreateBulk) ExecX(ctx context.Context) {
	if err := cccb.Exec(ctx); err != nil {
		panic(err)
	}
}
