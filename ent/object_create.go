// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dgut-icourse/ent/comment"
	"dgut-icourse/ent/course"
	"dgut-icourse/ent/object"
	"dgut-icourse/ent/organization"
	"dgut-icourse/ent/other"
	"dgut-icourse/ent/person"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ObjectCreate is the builder for creating a Object entity.
type ObjectCreate struct {
	config
	mutation *ObjectMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (oc *ObjectCreate) SetCreatedAt(i int64) *ObjectCreate {
	oc.mutation.SetCreatedAt(i)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableCreatedAt(i *int64) *ObjectCreate {
	if i != nil {
		oc.SetCreatedAt(*i)
	}
	return oc
}

// SetUpdatedAt sets the "updated_at" field.
func (oc *ObjectCreate) SetUpdatedAt(i int64) *ObjectCreate {
	oc.mutation.SetUpdatedAt(i)
	return oc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableUpdatedAt(i *int64) *ObjectCreate {
	if i != nil {
		oc.SetUpdatedAt(*i)
	}
	return oc
}

// SetName sets the "name" field.
func (oc *ObjectCreate) SetName(s string) *ObjectCreate {
	oc.mutation.SetName(s)
	return oc
}

// SetDesc sets the "desc" field.
func (oc *ObjectCreate) SetDesc(s string) *ObjectCreate {
	oc.mutation.SetDesc(s)
	return oc
}

// SetType sets the "type" field.
func (oc *ObjectCreate) SetType(i int8) *ObjectCreate {
	oc.mutation.SetType(i)
	return oc
}

// SetID sets the "id" field.
func (oc *ObjectCreate) SetID(u uuid.UUID) *ObjectCreate {
	oc.mutation.SetID(u)
	return oc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oc *ObjectCreate) SetNillableID(u *uuid.UUID) *ObjectCreate {
	if u != nil {
		oc.SetID(*u)
	}
	return oc
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (oc *ObjectCreate) SetCourseID(id int) *ObjectCreate {
	oc.mutation.SetCourseID(id)
	return oc
}

// SetNillableCourseID sets the "course" edge to the Course entity by ID if the given value is not nil.
func (oc *ObjectCreate) SetNillableCourseID(id *int) *ObjectCreate {
	if id != nil {
		oc = oc.SetCourseID(*id)
	}
	return oc
}

// SetCourse sets the "course" edge to the Course entity.
func (oc *ObjectCreate) SetCourse(c *Course) *ObjectCreate {
	return oc.SetCourseID(c.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (oc *ObjectCreate) SetOrganizationID(id int) *ObjectCreate {
	oc.mutation.SetOrganizationID(id)
	return oc
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (oc *ObjectCreate) SetNillableOrganizationID(id *int) *ObjectCreate {
	if id != nil {
		oc = oc.SetOrganizationID(*id)
	}
	return oc
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (oc *ObjectCreate) SetOrganization(o *Organization) *ObjectCreate {
	return oc.SetOrganizationID(o.ID)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (oc *ObjectCreate) SetPersonID(id int) *ObjectCreate {
	oc.mutation.SetPersonID(id)
	return oc
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (oc *ObjectCreate) SetNillablePersonID(id *int) *ObjectCreate {
	if id != nil {
		oc = oc.SetPersonID(*id)
	}
	return oc
}

// SetPerson sets the "person" edge to the Person entity.
func (oc *ObjectCreate) SetPerson(p *Person) *ObjectCreate {
	return oc.SetPersonID(p.ID)
}

// SetOtherID sets the "other" edge to the Other entity by ID.
func (oc *ObjectCreate) SetOtherID(id int) *ObjectCreate {
	oc.mutation.SetOtherID(id)
	return oc
}

// SetNillableOtherID sets the "other" edge to the Other entity by ID if the given value is not nil.
func (oc *ObjectCreate) SetNillableOtherID(id *int) *ObjectCreate {
	if id != nil {
		oc = oc.SetOtherID(*id)
	}
	return oc
}

// SetOther sets the "other" edge to the Other entity.
func (oc *ObjectCreate) SetOther(o *Other) *ObjectCreate {
	return oc.SetOtherID(o.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (oc *ObjectCreate) AddCommentIDs(ids ...uuid.UUID) *ObjectCreate {
	oc.mutation.AddCommentIDs(ids...)
	return oc
}

// AddComments adds the "comments" edges to the Comment entity.
func (oc *ObjectCreate) AddComments(c ...*Comment) *ObjectCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return oc.AddCommentIDs(ids...)
}

// AddTeachCourseIDs adds the "teach_courses" edge to the Course entity by IDs.
func (oc *ObjectCreate) AddTeachCourseIDs(ids ...int) *ObjectCreate {
	oc.mutation.AddTeachCourseIDs(ids...)
	return oc
}

// AddTeachCourses adds the "teach_courses" edges to the Course entity.
func (oc *ObjectCreate) AddTeachCourses(c ...*Course) *ObjectCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return oc.AddTeachCourseIDs(ids...)
}

// AddSetupCourseIDs adds the "setup_courses" edge to the Course entity by IDs.
func (oc *ObjectCreate) AddSetupCourseIDs(ids ...int) *ObjectCreate {
	oc.mutation.AddSetupCourseIDs(ids...)
	return oc
}

// AddSetupCourses adds the "setup_courses" edges to the Course entity.
func (oc *ObjectCreate) AddSetupCourses(c ...*Course) *ObjectCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return oc.AddSetupCourseIDs(ids...)
}

// Mutation returns the ObjectMutation object of the builder.
func (oc *ObjectCreate) Mutation() *ObjectMutation {
	return oc.mutation
}

// Save creates the Object in the database.
func (oc *ObjectCreate) Save(ctx context.Context) (*Object, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *ObjectCreate) SaveX(ctx context.Context) *Object {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *ObjectCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *ObjectCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *ObjectCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := object.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		v := object.DefaultUpdatedAt()
		oc.mutation.SetUpdatedAt(v)
	}
	if _, ok := oc.mutation.ID(); !ok {
		v := object.DefaultID()
		oc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *ObjectCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Object.created_at"`)}
	}
	if _, ok := oc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Object.updated_at"`)}
	}
	if _, ok := oc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Object.name"`)}
	}
	if v, ok := oc.mutation.Name(); ok {
		if err := object.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Object.name": %w`, err)}
		}
	}
	if _, ok := oc.mutation.Desc(); !ok {
		return &ValidationError{Name: "desc", err: errors.New(`ent: missing required field "Object.desc"`)}
	}
	if v, ok := oc.mutation.Desc(); ok {
		if err := object.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf(`ent: validator failed for field "Object.desc": %w`, err)}
		}
	}
	if _, ok := oc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Object.type"`)}
	}
	return nil
}

func (oc *ObjectCreate) sqlSave(ctx context.Context) (*Object, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *ObjectCreate) createSpec() (*Object, *sqlgraph.CreateSpec) {
	var (
		_node = &Object{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(object.Table, sqlgraph.NewFieldSpec(object.FieldID, field.TypeUUID))
	)
	if id, ok := oc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(object.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.UpdatedAt(); ok {
		_spec.SetField(object.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := oc.mutation.Name(); ok {
		_spec.SetField(object.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := oc.mutation.Desc(); ok {
		_spec.SetField(object.FieldDesc, field.TypeString, value)
		_node.Desc = value
	}
	if value, ok := oc.mutation.GetType(); ok {
		_spec.SetField(object.FieldType, field.TypeInt8, value)
		_node.Type = value
	}
	if nodes := oc.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.CourseTable,
			Columns: []string{object.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OrganizationTable,
			Columns: []string{object.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.PersonTable,
			Columns: []string{object.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.OtherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OtherTable,
			Columns: []string{object.OtherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(other.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.CommentsTable,
			Columns: []string{object.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TeachCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.TeachCoursesTable,
			Columns: []string{object.TeachCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.SetupCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.SetupCoursesTable,
			Columns: []string{object.SetupCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ObjectCreateBulk is the builder for creating many Object entities in bulk.
type ObjectCreateBulk struct {
	config
	err      error
	builders []*ObjectCreate
}

// Save creates the Object entities in the database.
func (ocb *ObjectCreateBulk) Save(ctx context.Context) ([]*Object, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Object, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ObjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *ObjectCreateBulk) SaveX(ctx context.Context) []*Object {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *ObjectCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *ObjectCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}
