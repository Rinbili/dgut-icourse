// Code generated by ent, DO NOT EDIT.

package person

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the person type in the database.
	Label = "person"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// EdgeObject holds the string denoting the object edge name in mutations.
	EdgeObject = "object"
	// Table holds the table name of the person in the database.
	Table = "persons"
	// ObjectTable is the table that holds the object relation/edge.
	ObjectTable = "persons"
	// ObjectInverseTable is the table name for the Object entity.
	// It exists in this package in order to avoid circular dependency with the "object" package.
	ObjectInverseTable = "objects"
	// ObjectColumn is the table column denoting the object relation/edge.
	ObjectColumn = "object_person"
)

// Columns holds all SQL columns for person fields.
var Columns = []string{
	FieldID,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "persons"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"object_person",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the Person queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByObjectField orders the results by object field.
func ByObjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newObjectStep(), sql.OrderByField(field, opts...))
	}
}
func newObjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ObjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, ObjectTable, ObjectColumn),
	)
}
