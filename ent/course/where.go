// Code generated by ent, DO NOT EDIT.

package course

import (
	"dgut-icourse/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v int64) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v int64) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldUpdatedAt, v))
}

// CourseID applies equality check predicate on the "courseID" field. It's identical to CourseIDEQ.
func CourseID(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v int64) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v int64) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...int64) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...int64) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v int64) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v int64) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v int64) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v int64) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v int64) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v int64) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...int64) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...int64) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v int64) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v int64) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v int64) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v int64) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldUpdatedAt, v))
}

// CourseIDEQ applies the EQ predicate on the "courseID" field.
func CourseIDEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldEQ(FieldCourseID, v))
}

// CourseIDNEQ applies the NEQ predicate on the "courseID" field.
func CourseIDNEQ(v string) predicate.Course {
	return predicate.Course(sql.FieldNEQ(FieldCourseID, v))
}

// CourseIDIn applies the In predicate on the "courseID" field.
func CourseIDIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldIn(FieldCourseID, vs...))
}

// CourseIDNotIn applies the NotIn predicate on the "courseID" field.
func CourseIDNotIn(vs ...string) predicate.Course {
	return predicate.Course(sql.FieldNotIn(FieldCourseID, vs...))
}

// CourseIDGT applies the GT predicate on the "courseID" field.
func CourseIDGT(v string) predicate.Course {
	return predicate.Course(sql.FieldGT(FieldCourseID, v))
}

// CourseIDGTE applies the GTE predicate on the "courseID" field.
func CourseIDGTE(v string) predicate.Course {
	return predicate.Course(sql.FieldGTE(FieldCourseID, v))
}

// CourseIDLT applies the LT predicate on the "courseID" field.
func CourseIDLT(v string) predicate.Course {
	return predicate.Course(sql.FieldLT(FieldCourseID, v))
}

// CourseIDLTE applies the LTE predicate on the "courseID" field.
func CourseIDLTE(v string) predicate.Course {
	return predicate.Course(sql.FieldLTE(FieldCourseID, v))
}

// CourseIDContains applies the Contains predicate on the "courseID" field.
func CourseIDContains(v string) predicate.Course {
	return predicate.Course(sql.FieldContains(FieldCourseID, v))
}

// CourseIDHasPrefix applies the HasPrefix predicate on the "courseID" field.
func CourseIDHasPrefix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasPrefix(FieldCourseID, v))
}

// CourseIDHasSuffix applies the HasSuffix predicate on the "courseID" field.
func CourseIDHasSuffix(v string) predicate.Course {
	return predicate.Course(sql.FieldHasSuffix(FieldCourseID, v))
}

// CourseIDEqualFold applies the EqualFold predicate on the "courseID" field.
func CourseIDEqualFold(v string) predicate.Course {
	return predicate.Course(sql.FieldEqualFold(FieldCourseID, v))
}

// CourseIDContainsFold applies the ContainsFold predicate on the "courseID" field.
func CourseIDContainsFold(v string) predicate.Course {
	return predicate.Course(sql.FieldContainsFold(FieldCourseID, v))
}

// HasObject applies the HasEdge predicate on the "object" edge.
func HasObject() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, ObjectTable, ObjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasObjectWith applies the HasEdge predicate on the "object" edge with a given conditions (other predicates).
func HasObjectWith(preds ...predicate.Object) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := newObjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTeacher applies the HasEdge predicate on the "teacher" edge.
func HasTeacher() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TeacherTable, TeacherColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTeacherWith applies the HasEdge predicate on the "teacher" edge with a given conditions (other predicates).
func HasTeacherWith(preds ...predicate.Object) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := newTeacherStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasOrganization applies the HasEdge predicate on the "organization" edge.
func HasOrganization() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OrganizationTable, OrganizationColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOrganizationWith applies the HasEdge predicate on the "organization" edge with a given conditions (other predicates).
func HasOrganizationWith(preds ...predicate.Object) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := newOrganizationStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Course) predicate.Course {
	return predicate.Course(sql.NotPredicates(p))
}
