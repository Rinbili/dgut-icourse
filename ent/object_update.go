// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"dgut-icourse/ent/comment"
	"dgut-icourse/ent/course"
	"dgut-icourse/ent/object"
	"dgut-icourse/ent/organization"
	"dgut-icourse/ent/other"
	"dgut-icourse/ent/person"
	"dgut-icourse/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// ObjectUpdate is the builder for updating Object entities.
type ObjectUpdate struct {
	config
	hooks    []Hook
	mutation *ObjectMutation
}

// Where appends a list predicates to the ObjectUpdate builder.
func (ou *ObjectUpdate) Where(ps ...predicate.Object) *ObjectUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetUpdatedAt sets the "updated_at" field.
func (ou *ObjectUpdate) SetUpdatedAt(i int64) *ObjectUpdate {
	ou.mutation.ResetUpdatedAt()
	ou.mutation.SetUpdatedAt(i)
	return ou
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ou *ObjectUpdate) AddUpdatedAt(i int64) *ObjectUpdate {
	ou.mutation.AddUpdatedAt(i)
	return ou
}

// SetName sets the "name" field.
func (ou *ObjectUpdate) SetName(s string) *ObjectUpdate {
	ou.mutation.SetName(s)
	return ou
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableName(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetName(*s)
	}
	return ou
}

// SetDesc sets the "desc" field.
func (ou *ObjectUpdate) SetDesc(s string) *ObjectUpdate {
	ou.mutation.SetDesc(s)
	return ou
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableDesc(s *string) *ObjectUpdate {
	if s != nil {
		ou.SetDesc(*s)
	}
	return ou
}

// SetType sets the "type" field.
func (ou *ObjectUpdate) SetType(i int8) *ObjectUpdate {
	ou.mutation.ResetType()
	ou.mutation.SetType(i)
	return ou
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ou *ObjectUpdate) SetNillableType(i *int8) *ObjectUpdate {
	if i != nil {
		ou.SetType(*i)
	}
	return ou
}

// AddType adds i to the "type" field.
func (ou *ObjectUpdate) AddType(i int8) *ObjectUpdate {
	ou.mutation.AddType(i)
	return ou
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (ou *ObjectUpdate) SetCourseID(id int) *ObjectUpdate {
	ou.mutation.SetCourseID(id)
	return ou
}

// SetNillableCourseID sets the "course" edge to the Course entity by ID if the given value is not nil.
func (ou *ObjectUpdate) SetNillableCourseID(id *int) *ObjectUpdate {
	if id != nil {
		ou = ou.SetCourseID(*id)
	}
	return ou
}

// SetCourse sets the "course" edge to the Course entity.
func (ou *ObjectUpdate) SetCourse(c *Course) *ObjectUpdate {
	return ou.SetCourseID(c.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ou *ObjectUpdate) SetOrganizationID(id int) *ObjectUpdate {
	ou.mutation.SetOrganizationID(id)
	return ou
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (ou *ObjectUpdate) SetNillableOrganizationID(id *int) *ObjectUpdate {
	if id != nil {
		ou = ou.SetOrganizationID(*id)
	}
	return ou
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ou *ObjectUpdate) SetOrganization(o *Organization) *ObjectUpdate {
	return ou.SetOrganizationID(o.ID)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (ou *ObjectUpdate) SetPersonID(id int) *ObjectUpdate {
	ou.mutation.SetPersonID(id)
	return ou
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (ou *ObjectUpdate) SetNillablePersonID(id *int) *ObjectUpdate {
	if id != nil {
		ou = ou.SetPersonID(*id)
	}
	return ou
}

// SetPerson sets the "person" edge to the Person entity.
func (ou *ObjectUpdate) SetPerson(p *Person) *ObjectUpdate {
	return ou.SetPersonID(p.ID)
}

// SetOtherID sets the "other" edge to the Other entity by ID.
func (ou *ObjectUpdate) SetOtherID(id int) *ObjectUpdate {
	ou.mutation.SetOtherID(id)
	return ou
}

// SetNillableOtherID sets the "other" edge to the Other entity by ID if the given value is not nil.
func (ou *ObjectUpdate) SetNillableOtherID(id *int) *ObjectUpdate {
	if id != nil {
		ou = ou.SetOtherID(*id)
	}
	return ou
}

// SetOther sets the "other" edge to the Other entity.
func (ou *ObjectUpdate) SetOther(o *Other) *ObjectUpdate {
	return ou.SetOtherID(o.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (ou *ObjectUpdate) AddCommentIDs(ids ...uuid.UUID) *ObjectUpdate {
	ou.mutation.AddCommentIDs(ids...)
	return ou
}

// AddComments adds the "comments" edges to the Comment entity.
func (ou *ObjectUpdate) AddComments(c ...*Comment) *ObjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.AddCommentIDs(ids...)
}

// AddTeachCourseIDs adds the "teach_courses" edge to the Course entity by IDs.
func (ou *ObjectUpdate) AddTeachCourseIDs(ids ...int) *ObjectUpdate {
	ou.mutation.AddTeachCourseIDs(ids...)
	return ou
}

// AddTeachCourses adds the "teach_courses" edges to the Course entity.
func (ou *ObjectUpdate) AddTeachCourses(c ...*Course) *ObjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.AddTeachCourseIDs(ids...)
}

// AddSetupCourseIDs adds the "setup_courses" edge to the Course entity by IDs.
func (ou *ObjectUpdate) AddSetupCourseIDs(ids ...int) *ObjectUpdate {
	ou.mutation.AddSetupCourseIDs(ids...)
	return ou
}

// AddSetupCourses adds the "setup_courses" edges to the Course entity.
func (ou *ObjectUpdate) AddSetupCourses(c ...*Course) *ObjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.AddSetupCourseIDs(ids...)
}

// Mutation returns the ObjectMutation object of the builder.
func (ou *ObjectUpdate) Mutation() *ObjectMutation {
	return ou.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (ou *ObjectUpdate) ClearCourse() *ObjectUpdate {
	ou.mutation.ClearCourse()
	return ou
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ou *ObjectUpdate) ClearOrganization() *ObjectUpdate {
	ou.mutation.ClearOrganization()
	return ou
}

// ClearPerson clears the "person" edge to the Person entity.
func (ou *ObjectUpdate) ClearPerson() *ObjectUpdate {
	ou.mutation.ClearPerson()
	return ou
}

// ClearOther clears the "other" edge to the Other entity.
func (ou *ObjectUpdate) ClearOther() *ObjectUpdate {
	ou.mutation.ClearOther()
	return ou
}

// ClearComments clears all "comments" edges to the Comment entity.
func (ou *ObjectUpdate) ClearComments() *ObjectUpdate {
	ou.mutation.ClearComments()
	return ou
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (ou *ObjectUpdate) RemoveCommentIDs(ids ...uuid.UUID) *ObjectUpdate {
	ou.mutation.RemoveCommentIDs(ids...)
	return ou
}

// RemoveComments removes "comments" edges to Comment entities.
func (ou *ObjectUpdate) RemoveComments(c ...*Comment) *ObjectUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.RemoveCommentIDs(ids...)
}

// ClearTeachCourses clears all "teach_courses" edges to the Course entity.
func (ou *ObjectUpdate) ClearTeachCourses() *ObjectUpdate {
	ou.mutation.ClearTeachCourses()
	return ou
}

// RemoveTeachCourseIDs removes the "teach_courses" edge to Course entities by IDs.
func (ou *ObjectUpdate) RemoveTeachCourseIDs(ids ...int) *ObjectUpdate {
	ou.mutation.RemoveTeachCourseIDs(ids...)
	return ou
}

// RemoveTeachCourses removes "teach_courses" edges to Course entities.
func (ou *ObjectUpdate) RemoveTeachCourses(c ...*Course) *ObjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.RemoveTeachCourseIDs(ids...)
}

// ClearSetupCourses clears all "setup_courses" edges to the Course entity.
func (ou *ObjectUpdate) ClearSetupCourses() *ObjectUpdate {
	ou.mutation.ClearSetupCourses()
	return ou
}

// RemoveSetupCourseIDs removes the "setup_courses" edge to Course entities by IDs.
func (ou *ObjectUpdate) RemoveSetupCourseIDs(ids ...int) *ObjectUpdate {
	ou.mutation.RemoveSetupCourseIDs(ids...)
	return ou
}

// RemoveSetupCourses removes "setup_courses" edges to Course entities.
func (ou *ObjectUpdate) RemoveSetupCourses(c ...*Course) *ObjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ou.RemoveSetupCourseIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *ObjectUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *ObjectUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *ObjectUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *ObjectUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *ObjectUpdate) defaults() {
	if _, ok := ou.mutation.UpdatedAt(); !ok {
		v := object.UpdateDefaultUpdatedAt()
		ou.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *ObjectUpdate) check() error {
	if v, ok := ou.mutation.Name(); ok {
		if err := object.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Object.name": %w`, err)}
		}
	}
	if v, ok := ou.mutation.Desc(); ok {
		if err := object.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf(`ent: validator failed for field "Object.desc": %w`, err)}
		}
	}
	return nil
}

func (ou *ObjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(object.Table, object.Columns, sqlgraph.NewFieldSpec(object.FieldID, field.TypeUUID))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.UpdatedAt(); ok {
		_spec.SetField(object.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(object.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.Name(); ok {
		_spec.SetField(object.FieldName, field.TypeString, value)
	}
	if value, ok := ou.mutation.Desc(); ok {
		_spec.SetField(object.FieldDesc, field.TypeString, value)
	}
	if value, ok := ou.mutation.GetType(); ok {
		_spec.SetField(object.FieldType, field.TypeInt8, value)
	}
	if value, ok := ou.mutation.AddedType(); ok {
		_spec.AddField(object.FieldType, field.TypeInt8, value)
	}
	if ou.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.CourseTable,
			Columns: []string{object.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.CourseTable,
			Columns: []string{object.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OrganizationTable,
			Columns: []string{object.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OrganizationTable,
			Columns: []string{object.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.PersonTable,
			Columns: []string{object.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.PersonTable,
			Columns: []string{object.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.OtherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OtherTable,
			Columns: []string{object.OtherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(other.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.OtherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OtherTable,
			Columns: []string{object.OtherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(other.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.CommentsTable,
			Columns: []string{object.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !ou.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.CommentsTable,
			Columns: []string{object.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.CommentsTable,
			Columns: []string{object.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.TeachCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.TeachCoursesTable,
			Columns: []string{object.TeachCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedTeachCoursesIDs(); len(nodes) > 0 && !ou.mutation.TeachCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.TeachCoursesTable,
			Columns: []string{object.TeachCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TeachCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.TeachCoursesTable,
			Columns: []string{object.TeachCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.SetupCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.SetupCoursesTable,
			Columns: []string{object.SetupCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.RemovedSetupCoursesIDs(); len(nodes) > 0 && !ou.mutation.SetupCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.SetupCoursesTable,
			Columns: []string{object.SetupCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.SetupCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.SetupCoursesTable,
			Columns: []string{object.SetupCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// ObjectUpdateOne is the builder for updating a single Object entity.
type ObjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ObjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (ouo *ObjectUpdateOne) SetUpdatedAt(i int64) *ObjectUpdateOne {
	ouo.mutation.ResetUpdatedAt()
	ouo.mutation.SetUpdatedAt(i)
	return ouo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (ouo *ObjectUpdateOne) AddUpdatedAt(i int64) *ObjectUpdateOne {
	ouo.mutation.AddUpdatedAt(i)
	return ouo
}

// SetName sets the "name" field.
func (ouo *ObjectUpdateOne) SetName(s string) *ObjectUpdateOne {
	ouo.mutation.SetName(s)
	return ouo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableName(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetName(*s)
	}
	return ouo
}

// SetDesc sets the "desc" field.
func (ouo *ObjectUpdateOne) SetDesc(s string) *ObjectUpdateOne {
	ouo.mutation.SetDesc(s)
	return ouo
}

// SetNillableDesc sets the "desc" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableDesc(s *string) *ObjectUpdateOne {
	if s != nil {
		ouo.SetDesc(*s)
	}
	return ouo
}

// SetType sets the "type" field.
func (ouo *ObjectUpdateOne) SetType(i int8) *ObjectUpdateOne {
	ouo.mutation.ResetType()
	ouo.mutation.SetType(i)
	return ouo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableType(i *int8) *ObjectUpdateOne {
	if i != nil {
		ouo.SetType(*i)
	}
	return ouo
}

// AddType adds i to the "type" field.
func (ouo *ObjectUpdateOne) AddType(i int8) *ObjectUpdateOne {
	ouo.mutation.AddType(i)
	return ouo
}

// SetCourseID sets the "course" edge to the Course entity by ID.
func (ouo *ObjectUpdateOne) SetCourseID(id int) *ObjectUpdateOne {
	ouo.mutation.SetCourseID(id)
	return ouo
}

// SetNillableCourseID sets the "course" edge to the Course entity by ID if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableCourseID(id *int) *ObjectUpdateOne {
	if id != nil {
		ouo = ouo.SetCourseID(*id)
	}
	return ouo
}

// SetCourse sets the "course" edge to the Course entity.
func (ouo *ObjectUpdateOne) SetCourse(c *Course) *ObjectUpdateOne {
	return ouo.SetCourseID(c.ID)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by ID.
func (ouo *ObjectUpdateOne) SetOrganizationID(id int) *ObjectUpdateOne {
	ouo.mutation.SetOrganizationID(id)
	return ouo
}

// SetNillableOrganizationID sets the "organization" edge to the Organization entity by ID if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableOrganizationID(id *int) *ObjectUpdateOne {
	if id != nil {
		ouo = ouo.SetOrganizationID(*id)
	}
	return ouo
}

// SetOrganization sets the "organization" edge to the Organization entity.
func (ouo *ObjectUpdateOne) SetOrganization(o *Organization) *ObjectUpdateOne {
	return ouo.SetOrganizationID(o.ID)
}

// SetPersonID sets the "person" edge to the Person entity by ID.
func (ouo *ObjectUpdateOne) SetPersonID(id int) *ObjectUpdateOne {
	ouo.mutation.SetPersonID(id)
	return ouo
}

// SetNillablePersonID sets the "person" edge to the Person entity by ID if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillablePersonID(id *int) *ObjectUpdateOne {
	if id != nil {
		ouo = ouo.SetPersonID(*id)
	}
	return ouo
}

// SetPerson sets the "person" edge to the Person entity.
func (ouo *ObjectUpdateOne) SetPerson(p *Person) *ObjectUpdateOne {
	return ouo.SetPersonID(p.ID)
}

// SetOtherID sets the "other" edge to the Other entity by ID.
func (ouo *ObjectUpdateOne) SetOtherID(id int) *ObjectUpdateOne {
	ouo.mutation.SetOtherID(id)
	return ouo
}

// SetNillableOtherID sets the "other" edge to the Other entity by ID if the given value is not nil.
func (ouo *ObjectUpdateOne) SetNillableOtherID(id *int) *ObjectUpdateOne {
	if id != nil {
		ouo = ouo.SetOtherID(*id)
	}
	return ouo
}

// SetOther sets the "other" edge to the Other entity.
func (ouo *ObjectUpdateOne) SetOther(o *Other) *ObjectUpdateOne {
	return ouo.SetOtherID(o.ID)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (ouo *ObjectUpdateOne) AddCommentIDs(ids ...uuid.UUID) *ObjectUpdateOne {
	ouo.mutation.AddCommentIDs(ids...)
	return ouo
}

// AddComments adds the "comments" edges to the Comment entity.
func (ouo *ObjectUpdateOne) AddComments(c ...*Comment) *ObjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.AddCommentIDs(ids...)
}

// AddTeachCourseIDs adds the "teach_courses" edge to the Course entity by IDs.
func (ouo *ObjectUpdateOne) AddTeachCourseIDs(ids ...int) *ObjectUpdateOne {
	ouo.mutation.AddTeachCourseIDs(ids...)
	return ouo
}

// AddTeachCourses adds the "teach_courses" edges to the Course entity.
func (ouo *ObjectUpdateOne) AddTeachCourses(c ...*Course) *ObjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.AddTeachCourseIDs(ids...)
}

// AddSetupCourseIDs adds the "setup_courses" edge to the Course entity by IDs.
func (ouo *ObjectUpdateOne) AddSetupCourseIDs(ids ...int) *ObjectUpdateOne {
	ouo.mutation.AddSetupCourseIDs(ids...)
	return ouo
}

// AddSetupCourses adds the "setup_courses" edges to the Course entity.
func (ouo *ObjectUpdateOne) AddSetupCourses(c ...*Course) *ObjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.AddSetupCourseIDs(ids...)
}

// Mutation returns the ObjectMutation object of the builder.
func (ouo *ObjectUpdateOne) Mutation() *ObjectMutation {
	return ouo.mutation
}

// ClearCourse clears the "course" edge to the Course entity.
func (ouo *ObjectUpdateOne) ClearCourse() *ObjectUpdateOne {
	ouo.mutation.ClearCourse()
	return ouo
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (ouo *ObjectUpdateOne) ClearOrganization() *ObjectUpdateOne {
	ouo.mutation.ClearOrganization()
	return ouo
}

// ClearPerson clears the "person" edge to the Person entity.
func (ouo *ObjectUpdateOne) ClearPerson() *ObjectUpdateOne {
	ouo.mutation.ClearPerson()
	return ouo
}

// ClearOther clears the "other" edge to the Other entity.
func (ouo *ObjectUpdateOne) ClearOther() *ObjectUpdateOne {
	ouo.mutation.ClearOther()
	return ouo
}

// ClearComments clears all "comments" edges to the Comment entity.
func (ouo *ObjectUpdateOne) ClearComments() *ObjectUpdateOne {
	ouo.mutation.ClearComments()
	return ouo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (ouo *ObjectUpdateOne) RemoveCommentIDs(ids ...uuid.UUID) *ObjectUpdateOne {
	ouo.mutation.RemoveCommentIDs(ids...)
	return ouo
}

// RemoveComments removes "comments" edges to Comment entities.
func (ouo *ObjectUpdateOne) RemoveComments(c ...*Comment) *ObjectUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.RemoveCommentIDs(ids...)
}

// ClearTeachCourses clears all "teach_courses" edges to the Course entity.
func (ouo *ObjectUpdateOne) ClearTeachCourses() *ObjectUpdateOne {
	ouo.mutation.ClearTeachCourses()
	return ouo
}

// RemoveTeachCourseIDs removes the "teach_courses" edge to Course entities by IDs.
func (ouo *ObjectUpdateOne) RemoveTeachCourseIDs(ids ...int) *ObjectUpdateOne {
	ouo.mutation.RemoveTeachCourseIDs(ids...)
	return ouo
}

// RemoveTeachCourses removes "teach_courses" edges to Course entities.
func (ouo *ObjectUpdateOne) RemoveTeachCourses(c ...*Course) *ObjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.RemoveTeachCourseIDs(ids...)
}

// ClearSetupCourses clears all "setup_courses" edges to the Course entity.
func (ouo *ObjectUpdateOne) ClearSetupCourses() *ObjectUpdateOne {
	ouo.mutation.ClearSetupCourses()
	return ouo
}

// RemoveSetupCourseIDs removes the "setup_courses" edge to Course entities by IDs.
func (ouo *ObjectUpdateOne) RemoveSetupCourseIDs(ids ...int) *ObjectUpdateOne {
	ouo.mutation.RemoveSetupCourseIDs(ids...)
	return ouo
}

// RemoveSetupCourses removes "setup_courses" edges to Course entities.
func (ouo *ObjectUpdateOne) RemoveSetupCourses(c ...*Course) *ObjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ouo.RemoveSetupCourseIDs(ids...)
}

// Where appends a list predicates to the ObjectUpdate builder.
func (ouo *ObjectUpdateOne) Where(ps ...predicate.Object) *ObjectUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *ObjectUpdateOne) Select(field string, fields ...string) *ObjectUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Object entity.
func (ouo *ObjectUpdateOne) Save(ctx context.Context) (*Object, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *ObjectUpdateOne) SaveX(ctx context.Context) *Object {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *ObjectUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *ObjectUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *ObjectUpdateOne) defaults() {
	if _, ok := ouo.mutation.UpdatedAt(); !ok {
		v := object.UpdateDefaultUpdatedAt()
		ouo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *ObjectUpdateOne) check() error {
	if v, ok := ouo.mutation.Name(); ok {
		if err := object.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Object.name": %w`, err)}
		}
	}
	if v, ok := ouo.mutation.Desc(); ok {
		if err := object.DescValidator(v); err != nil {
			return &ValidationError{Name: "desc", err: fmt.Errorf(`ent: validator failed for field "Object.desc": %w`, err)}
		}
	}
	return nil
}

func (ouo *ObjectUpdateOne) sqlSave(ctx context.Context) (_node *Object, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(object.Table, object.Columns, sqlgraph.NewFieldSpec(object.FieldID, field.TypeUUID))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Object.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, object.FieldID)
		for _, f := range fields {
			if !object.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != object.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.UpdatedAt(); ok {
		_spec.SetField(object.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(object.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.Name(); ok {
		_spec.SetField(object.FieldName, field.TypeString, value)
	}
	if value, ok := ouo.mutation.Desc(); ok {
		_spec.SetField(object.FieldDesc, field.TypeString, value)
	}
	if value, ok := ouo.mutation.GetType(); ok {
		_spec.SetField(object.FieldType, field.TypeInt8, value)
	}
	if value, ok := ouo.mutation.AddedType(); ok {
		_spec.AddField(object.FieldType, field.TypeInt8, value)
	}
	if ouo.mutation.CourseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.CourseTable,
			Columns: []string{object.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CourseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.CourseTable,
			Columns: []string{object.CourseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OrganizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OrganizationTable,
			Columns: []string{object.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OrganizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OrganizationTable,
			Columns: []string{object.OrganizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.PersonCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.PersonTable,
			Columns: []string{object.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.PersonIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.PersonTable,
			Columns: []string{object.PersonColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(person.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.OtherCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OtherTable,
			Columns: []string{object.OtherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(other.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.OtherIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   object.OtherTable,
			Columns: []string{object.OtherColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(other.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.CommentsTable,
			Columns: []string{object.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !ouo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.CommentsTable,
			Columns: []string{object.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.CommentsTable,
			Columns: []string{object.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.TeachCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.TeachCoursesTable,
			Columns: []string{object.TeachCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedTeachCoursesIDs(); len(nodes) > 0 && !ouo.mutation.TeachCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.TeachCoursesTable,
			Columns: []string{object.TeachCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TeachCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.TeachCoursesTable,
			Columns: []string{object.TeachCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.SetupCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.SetupCoursesTable,
			Columns: []string{object.SetupCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.RemovedSetupCoursesIDs(); len(nodes) > 0 && !ouo.mutation.SetupCoursesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.SetupCoursesTable,
			Columns: []string{object.SetupCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.SetupCoursesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   object.SetupCoursesTable,
			Columns: []string{object.SetupCoursesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(course.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Object{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{object.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
