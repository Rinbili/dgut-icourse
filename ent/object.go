// Code generated by ent, DO NOT EDIT.

package ent

import (
	"dgut-icourse/ent/course"
	"dgut-icourse/ent/object"
	"dgut-icourse/ent/organization"
	"dgut-icourse/ent/other"
	"dgut-icourse/ent/person"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Object is the model entity for the Object schema.
type Object struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id"`
	// 创建时间
	CreatedAt int64 `json:"created_at,omitempty"`
	// 更新时间
	UpdatedAt int64 `json:"updated_at,omitempty"`
	// 名称
	Name string `json:"name,omitempty"`
	// 描述
	Desc string `json:"desc,omitempty"`
	// 类型
	Type int8 `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ObjectQuery when eager-loading is set.
	Edges        ObjectEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ObjectEdges holds the relations/edges for other nodes in the graph.
type ObjectEdges struct {
	// Course holds the value of the course edge.
	Course *Course `json:"course,omitempty"`
	// Organization holds the value of the organization edge.
	Organization *Organization `json:"organization,omitempty"`
	// Person holds the value of the person edge.
	Person *Person `json:"person,omitempty"`
	// Other holds the value of the other edge.
	Other *Other `json:"other,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// TeachCourses holds the value of the teach_courses edge.
	TeachCourses []*Course `json:"teach_courses,omitempty"`
	// SetupCourses holds the value of the setup_courses edge.
	SetupCourses []*Course `json:"setup_courses,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
}

// CourseOrErr returns the Course value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ObjectEdges) CourseOrErr() (*Course, error) {
	if e.Course != nil {
		return e.Course, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: course.Label}
	}
	return nil, &NotLoadedError{edge: "course"}
}

// OrganizationOrErr returns the Organization value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ObjectEdges) OrganizationOrErr() (*Organization, error) {
	if e.Organization != nil {
		return e.Organization, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: organization.Label}
	}
	return nil, &NotLoadedError{edge: "organization"}
}

// PersonOrErr returns the Person value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ObjectEdges) PersonOrErr() (*Person, error) {
	if e.Person != nil {
		return e.Person, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: person.Label}
	}
	return nil, &NotLoadedError{edge: "person"}
}

// OtherOrErr returns the Other value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ObjectEdges) OtherOrErr() (*Other, error) {
	if e.Other != nil {
		return e.Other, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: other.Label}
	}
	return nil, &NotLoadedError{edge: "other"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e ObjectEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[4] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// TeachCoursesOrErr returns the TeachCourses value or an error if the edge
// was not loaded in eager-loading.
func (e ObjectEdges) TeachCoursesOrErr() ([]*Course, error) {
	if e.loadedTypes[5] {
		return e.TeachCourses, nil
	}
	return nil, &NotLoadedError{edge: "teach_courses"}
}

// SetupCoursesOrErr returns the SetupCourses value or an error if the edge
// was not loaded in eager-loading.
func (e ObjectEdges) SetupCoursesOrErr() ([]*Course, error) {
	if e.loadedTypes[6] {
		return e.SetupCourses, nil
	}
	return nil, &NotLoadedError{edge: "setup_courses"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Object) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case object.FieldCreatedAt, object.FieldUpdatedAt, object.FieldType:
			values[i] = new(sql.NullInt64)
		case object.FieldName, object.FieldDesc:
			values[i] = new(sql.NullString)
		case object.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Object fields.
func (o *Object) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case object.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				o.ID = *value
			}
		case object.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				o.CreatedAt = value.Int64
			}
		case object.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				o.UpdatedAt = value.Int64
			}
		case object.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				o.Name = value.String
			}
		case object.FieldDesc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field desc", values[i])
			} else if value.Valid {
				o.Desc = value.String
			}
		case object.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				o.Type = int8(value.Int64)
			}
		default:
			o.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Object.
// This includes values selected through modifiers, order, etc.
func (o *Object) Value(name string) (ent.Value, error) {
	return o.selectValues.Get(name)
}

// QueryCourse queries the "course" edge of the Object entity.
func (o *Object) QueryCourse() *CourseQuery {
	return NewObjectClient(o.config).QueryCourse(o)
}

// QueryOrganization queries the "organization" edge of the Object entity.
func (o *Object) QueryOrganization() *OrganizationQuery {
	return NewObjectClient(o.config).QueryOrganization(o)
}

// QueryPerson queries the "person" edge of the Object entity.
func (o *Object) QueryPerson() *PersonQuery {
	return NewObjectClient(o.config).QueryPerson(o)
}

// QueryOther queries the "other" edge of the Object entity.
func (o *Object) QueryOther() *OtherQuery {
	return NewObjectClient(o.config).QueryOther(o)
}

// QueryComments queries the "comments" edge of the Object entity.
func (o *Object) QueryComments() *CommentQuery {
	return NewObjectClient(o.config).QueryComments(o)
}

// QueryTeachCourses queries the "teach_courses" edge of the Object entity.
func (o *Object) QueryTeachCourses() *CourseQuery {
	return NewObjectClient(o.config).QueryTeachCourses(o)
}

// QuerySetupCourses queries the "setup_courses" edge of the Object entity.
func (o *Object) QuerySetupCourses() *CourseQuery {
	return NewObjectClient(o.config).QuerySetupCourses(o)
}

// Update returns a builder for updating this Object.
// Note that you need to call Object.Unwrap() before calling this method if this Object
// was returned from a transaction, and the transaction was committed or rolled back.
func (o *Object) Update() *ObjectUpdateOne {
	return NewObjectClient(o.config).UpdateOne(o)
}

// Unwrap unwraps the Object entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (o *Object) Unwrap() *Object {
	_tx, ok := o.config.driver.(*txDriver)
	if !ok {
		panic("ent: Object is not a transactional entity")
	}
	o.config.driver = _tx.drv
	return o
}

// String implements the fmt.Stringer.
func (o *Object) String() string {
	var builder strings.Builder
	builder.WriteString("Object(")
	builder.WriteString(fmt.Sprintf("id=%v, ", o.ID))
	builder.WriteString("created_at=")
	builder.WriteString(fmt.Sprintf("%v", o.CreatedAt))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(fmt.Sprintf("%v", o.UpdatedAt))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(o.Name)
	builder.WriteString(", ")
	builder.WriteString("desc=")
	builder.WriteString(o.Desc)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", o.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Objects is a parsable slice of Object.
type Objects []*Object
